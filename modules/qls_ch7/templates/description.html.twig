{#
Description text for Section 7.
#}

{% set qls_ch7_metadata_account_form = path('qls_ch7.metadata_account_form') %}
{% set qls_ch7_metadata_mosaic_form = path('qls_ch7.metadata_mosaic_form') %}
{% set qls_ch7_metadata_namespace_form = path('qls_ch7.metadata_namespace_form') %}
{% set qls_ch7_list_metadata_form = path('qls_ch7.list_metadata_form') %}

<h2>{{ 'メタデータ'|t }}</h2>

<p>
{% trans %}
アカウント・モザイク・ネームスペースに対してKey-Value形式のデータを登録することができます。Valueの最大値は1024バイトです。
本章ではモザイク・ネームスペースの作成アカウントとメタデータの作成アカウントがどちらもAliceであることを前提に説明します。
{% endtrans %}
</p>

<h3><a href={{ qls_ch7_metadata_account_form }}>7.1 {{ 'アカウントに登録'|t }}</a></h3>
<p>
{% trans %}
アカウントに対して、Key-Value値を登録します。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$config = new Configuration();
$config->setHost($NODE_URL);
$client = new GuzzleHttp\Client();
$metaApiInstance = new MetadataRoutesApi($client, $config);

/**
 * メタデータの作成
 * アカウントに登録
 */
$targetAddress = $aliceKey->address;  // メタデータ記録先アドレス
$sourceAddress = $aliceKey->address;  // メタデータ作成者アドレス

// キーと値の設定
$keyId = Metadata::metadataGenerateKey("key_account");
$newValue = "test";

// 同じキーのメタデータが登録されているか確認
$metadataInfo = $metaApiInstance->searchMetadataEntries(
  source_address: $sourceAddress,
  scoped_metadata_key: strtoupper(dechex($keyId)),  // 16進数の大文字の文字列に変換
);

$oldValue = hex2bin($metadataInfo['data'][0]['metadata_entry']['value']); //16進エンコードされたバイナリ文字列をデコード
$updateValue = Metadata::metadataUpdateValue($oldValue, $newValue, true);

$tx = new EmbeddedAccountMetadataTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,  // 署名者公開鍵
  targetAddress: new UnresolvedAddress($targetAddress),  // メタデータ記録先アドレス
  scopedMetadataKey: $keyId,
  valueSizeDelta: strlen($newValue) - strlen($oldValue),
  value: $updateValue,
);

// マークルハッシュの算出
$embeddedTransactions = [$tx];
$merkleHash = $facade->hashEmbeddedTransactions($embeddedTransactions);

// アグリゲートTx作成
$aggregateTx = new AggregateCompleteTransactionV2(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,
  deadline: new Timestamp($facade->now()->addHours(2)),
  transactionsHash: $merkleHash,
  transactions: $embeddedTransactions,
);
// 手数料
$facade->setMaxFee($aggregateTx, 100);

// 署名
$sig = $aliceKey->signTransaction($aggregateTx);
$payload = $facade->attachSignature($aggregateTx, $sig);

$apiInstance = new TransactionRoutesApi($client, $config);

// アナウンス
try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
$hash = $facade->hashTransaction($aggregateTx);
echo "\n===トランザクションハッシュ===" . PHP_EOL;
echo $hash . PHP_EOL;
</code></pre>
</div>
<p>
{% trans %}
メタデータの登録には記録先アカウントが承諾を示す署名が必要です。
また、記録先アカウントと記録者アカウントが同一でもアグリゲートトランザクションにする必要があります。
{% endtrans %}
</p>
<p>
{% trans %}
異なるアカウントのメタデータに登録する場合は署名時にsignTransactionWithCosig-natoriesを使用します。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$bobKey = $facade->createAccount(new PrivateKey('ED949592C90CA58A16CB5BEC303DB011A48373063DDB0C4CFD6DFD01Fxxxxxx'));
$targetAddress = $bobKey->address;  // メタデータ記録先アドレス
$sourceAddress = $aliceKey->address;  // メタデータ作成者アドレス

// キーと値の設定
$keyId = Metadata::metadataGenerateKey("key_account");
$newValue = "test";

// 同じキーのメタデータが登録されているか確認
$metadataInfo = $metaApiInstance->searchMetadataEntries(
  target_address: $targetAddress,
  source_address: $sourceAddress,
  scoped_metadata_key: strtoupper(dechex($keyId)),  // 16進数の大文字の文字列に変換
);

$oldValue = hex2bin($metadataInfo['data'][0]['metadata_entry']['value']); //16進エンコードされたバイナリ文字列をデコード
$updateValue = Metadata::metadataUpdateValue($oldValue, $newValue, true);

$tx = new EmbeddedAccountMetadataTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,  // 署名者公開鍵
  targetAddress: $targetAddress,  // メタデータ記録先アドレス
  scopedMetadataKey: $keyId,
  valueSizeDelta: strlen($newValue) - strlen($oldValue),
  value: $updateValue,
);

// マークルハッシュの算出
$embeddedTransactions = [$tx];
$merkleHash = $facade->hashEmbeddedTransactions($embeddedTransactions);

// アグリゲートTx作成
$aggregateTx = new AggregateCompleteTransactionV2(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,
  deadline: new Timestamp($facade->now()->addHours(2)),
  transactionsHash: $merkleHash,
  transactions: $embeddedTransactions,
);
// 手数料
$facade->setMaxFee($aggregateTx, 100, 1);

// 作成者による署名
$sig = $aliceKey->signTransaction($aggregateTx);
$facade->attachSignature($aggregateTx, $sig);

// 記録先アカウントによる連署
$coSig = $bobKey->cosignTransaction($aggregateTx);
array_push($aggregateTx->cosignatures, $coSig);

$payload = ['payload' => strtoupper(bin2hex($aggregateTx->serialize()))];

$apiInstance = new TransactionRoutesApi($client, $config);

// アナウンス
try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>
<p>
{% trans %}
bobの秘密鍵が分からない場合はこの後の章で説明するアグリゲートボンデッドトランザクション、あるいはオフライン署名を使用する必要があります。
{% endtrans %}
</p>


<h3><a href={{ qls_ch7_metadata_mosaic_form }}>7.2 {{ 'モザイクに登録'|t }}</a></h3>
<p>
{% trans %}
ターゲットとなるモザイクに対して、Key値・ソースアカウントの複合キーでValue値を登録します。
登録・更新にはモザイクを作成したアカウントの署名が必要です。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$targetMosaic = '6FA40B0B8B9E392F';
$mosaicApiInstance = new MosaicRoutesApi($client, $config);
$mosaicInfo = $mosaicApiInstance->getMosaic($targetMosaic);
$sourceAddress = $mosaicInfo['mosaic']['owner_address']; // モザイク作成者アドレス

$keyId = Metadata::metadataGenerateKey("key_mosaic");
$newValue = 'test';

// 同じキーのメタデータが登録されているか確認
$metadataInfo = $metaApiInstance->searchMetadataEntries(
  target_id: $targetMosaic,
  source_address: new UnresolvedAddress($sourceAddress),
  scoped_metadata_key: strtoupper(dechex($keyId)),  // 16進数の大文字の文字列に変換
  metadata_type: 1,
);

$oldValue = hex2bin($metadataInfo['data'][0]['metadata_entry']['value']); //16進エンコードされたバイナリ文字列をデコード
$updateValue = Metadata::metadataUpdateValue($oldValue, $newValue, true);

$tx = new EmbeddedMosaicMetadataTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,  // 署名者公開鍵
  targetMosaicId: new UnresolvedMosaicId(hexdec($targetMosaic)),
  targetAddress: new UnresolvedAddress($sourceAddress),
  scopedMetadataKey: $keyId,
  valueSizeDelta: strlen($newValue) - strlen($oldValue),
  value: $updateValue,
);

// マークルハッシュの算出
$embeddedTransactions = [$tx];
$merkleHash = $facade->hashEmbeddedTransactions($embeddedTransactions);

// アグリゲートTx作成
$aggregateTx = new AggregateCompleteTransactionV2(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,
  deadline: new Timestamp($facade->now()->addHours(2)),
  transactionsHash: $merkleHash,
  transactions: $embeddedTransactions,
);
// 手数料
$facade->setMaxFee($aggregateTx, 100);

// 作成者による署名
$sig = $aliceKey->signTransaction($aggregateTx);
$payload =$facade->attachSignature($aggregateTx, $sig);

$apiInstance = new TransactionRoutesApi($client, $config);

// アナウンス
try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>

<h3><a href={{ qls_ch7_metadata_namespace_form }}>7.3 {{ 'ネームスペースに登録'|t }}</a></h3>
<p>
{% trans %}ネームスペースに対して、Key-Value値を登録します。
登録・更新にはネームスペースを作成したアカウントの署名が必要です。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
//ターゲットと作成者アドレスの設定
$targetNamespace = new NamespaceId(IdGenerator::generateNamespaceId("fugafuga"));

$namespaceApiInstance = new NamespaceRoutesApi($client, $config);
$namespaceInfo = $namespaceApiInstance->getNamespace(substr($targetNamespace, 2));

$sourceAddress = new UnresolvedAddress($namespaceInfo['namespace']['owner_address']); // ネームスペース作成者アドレス

$keyId = Metadata::metadataGenerateKey("key_namespace");
$newValue = 'test';

// 同じキーのメタデータが登録されているか確認
$metadataInfo = $metaApiInstance->searchMetadataEntries(
  target_id: substr($targetNamespace, 2),
  source_address: $sourceAddress,
  scoped_metadata_key: strtoupper(dechex($keyId)),  // 16進数の大文字の文字列に変換
  metadata_type: 2,
);

$oldValue = hex2bin($metadataInfo['data'][0]['metadata_entry']['value']); //16進エンコードされたバイナリ文字列をデコード
$updateValue = Metadata::metadataUpdateValue($oldValue, $newValue, true);

$tx = new EmbeddedNamespaceMetadataTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,  // 署名者公開鍵
  targetNamespaceId: new NamespaceId($targetNamespace),
  targetAddress: $sourceAddress,
  scopedMetadataKey: $keyId,
  valueSizeDelta: strlen($newValue) - strlen($oldValue),
  value: $updateValue,
);

// マークルハッシュの算出
$embeddedTransactions = [$tx];
$merkleHash = $facade->hashEmbeddedTransactions($embeddedTransactions);

// アグリゲートTx作成
$aggregateTx = new AggregateCompleteTransactionV2(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,
  deadline: new Timestamp($facade->now()->addHours(2)),
  transactionsHash: $merkleHash,
  transactions: $embeddedTransactions,
);
// 手数料
$facade->setMaxFee($aggregateTx, 100);

// 作成者による署名
$sig = $aliceKey->signTransaction($aggregateTx);
$payload =$facade->attachSignature($aggregateTx, $sig);

$apiInstance = new TransactionRoutesApi($client, $config);

// アナウンス
try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>

<h3><a href={{ qls_ch7_list_metadata_form }}>7.4 {{ '確認'|t }}</a></h3>
<p>
{% trans %}登録したメタデータを確認します。{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$metaApiInstance = new MetadataRoutesApi($client, $config);
$metadataInfo = $metaApiInstance->searchMetadataEntries(
  target_address: $aliceKey->address,
  source_address: $aliceAddress,
);
echo "\n===メタデータ一覧===" . PHP_EOL;
echo $metadataInfo;
</code></pre>
</div>

<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
{
    "data": [
        {
            "id": "66A1127884E82060AFC1D36F",
            "metadataEntry": {
                "version": 1,
                "compositeHash": "376909753F88E724C42E0313C3F98F44E3BDA949827E49889AB75125E180DD5B",
                "sourceAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "targetAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "scopedMetadataKey": "7FFFFFFFFFFFFFFF",
                "targetId": {},
                "metadataType": 0,
                "value": "74657374"
            }
        },
        {
            "id": "66A120C284E82060AFC1E5AE",
            "metadataEntry": {
                "version": 1,
                "compositeHash": "77B448E5375D16F44FF3C2E35221759B35438D360BD89DB0679003FFD1E7D9F5",
                "sourceAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "targetAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "scopedMetadataKey": "8EF1ED391DB8F32F",
                "targetId": {},
                "metadataType": 0,
                "value": "686F6765"
            }
        },
        {
            "id": "66A1720784E82060AFC260B5",
            "metadataEntry": {
                "version": 1,
                "compositeHash": "D686E984A60295C57F7D7A350CD2B51A3A55CD67BF4F302DE0E22A39D4E9F9A0",
                "sourceAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "targetAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "scopedMetadataKey": "D95FCE92728FA600",
                "targetId": {},
                "metadataType": 0,
                "value": "686F6765"
            }
        },
        {
            "id": "66A23EE184E82060AFC38CE6",
            "metadataEntry": {
                "version": 1,
                "compositeHash": "DA221A3B4D09C0C1833A7176E73D3CD2C23B2B4A37A3D124399FC9D104D9EC97",
                "sourceAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "targetAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "scopedMetadataKey": "CF217E116AA422E2",
                "targetId": {},
                "metadataType": 1,
                "value": "74657374"
            }
        },
        {
            "id": "66A242D384E82060AFC392DD",
            "metadataEntry": {
                "version": 1,
                "compositeHash": "BB4A767B68E32FE66319BB4DEF98FF23EF1AEE22863DE3E59C04A03F37E9DB7F",
                "sourceAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "targetAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "scopedMetadataKey": "8B6A8A370873D0D9",
                "targetId": {},
                "metadataType": 2,
                "value": "74657374"
            }
        }
    ],
    "pagination": {
        "pageNumber": 1,
        "pageSize": 10
    }
}
</code></pre>
</div>
{% trans %}
metadataTypeは以下の通りです。
{% endtrans %}
<pre>
metadataType
{0: 'Account', 1: 'Mosaic', 2: 'Namespace'}
</pre>
<h3>7.4.1 {{ '注意事項'|t }}</h3>
<p>
{% trans %}
メタデータはキー値で素早く情報にアクセスできるというメリットがある一方で更新可能であることに注意しておく必要があります。
更新には、発行者アカウントと登録先アカウントの署名が必要のため、それらのアカウントの管理状態が信用できる場合のみ使用するようにしてください。
{% endtrans %}
</p>

<h3>7.5 {{ '現場で使えるヒント'|t }}</h3>

<h4>7.5.1 {{ '有資格証明'|t }}</h4>
<p>
{% trans %}
モザイクの章で所有証明、ネームスペースの章でドメインリンクの説明をしました。
実社会で信頼性の高いドメインからリンクされたアカウントが発行したメタデータの付与を受けることでそのドメイン内での有資格情報の所有を証明することができます。
{% endtrans %}
</p>

<h4>DID</h4>
<p>
{% trans %}
分散型アイデンティティと呼ばれます。
エコシステムは発行者、所有者、検証者に分かれ、例えば大学が発行した卒業証書を学生が所有し、企業は学生から提示された証明書を大学が公表している公開鍵をもとに検証します。
このやりとりにプラットフォームに依存する情報はありません。
メタデータを活用することで、大学は学生の所有するアカウントにメタデータを発行することができ、
企業は大学の公開鍵と学生のモザイク(アカウント)所有証明でメタデータに記載された卒業証明を検証することができます。
{% endtrans %}
</p>
