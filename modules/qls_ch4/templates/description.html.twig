{#
Description text for Chapter 4.
#}

{% set qls_ch4_simple_transfer_transaction_form = path('qls_ch4.simple_transfer_transaction_form') %}
{% set qls_ch4_list_transactions_form = path('qls_ch4.list_transactions_form') %}
{% set qls_ch4_form_page = path('qls_ch4.form_page') %}

<h2>{{ 'トランザクション'|t }}</h2>

<p>
{% trans %}
ブロックチェーン上のデータ更新はトランザクションをネットワークにアナウンスすることによって行います。
{% endtrans %}
</p>

<h3>4.1 {{ 'トランザクションのライフサイクル'|t }}</h3>
<p>
{% trans %}
トランザクションを作成してから、改ざんが困難なデータとなるまでを順に説明します。
{% endtrans %}
</p>

<p>
<ul>
<li>{{ 'トランザクション作成'|t }}
<span>– {% trans %}ブロックチェーンが受理できるフォーマットでトランザクションを作成します。{% endtrans %}</span>
</li>
<li>{{ '署名'|t }}
<span>– {% trans %}アカウントの秘密鍵でトランザクションを署名します。{% endtrans %}</span>
</li>
<li>{{ 'アナウンス'|t }}
<span>– {% trans %}任意のノードに署名済みトランザクションを通知します。{% endtrans %}</span>
</li>
<li>{{ '未承認トランザクション'|t }}
<span>– ノ{% trans %}ードに受理されたトランザクションは、未承認トランザクションとして全ノードに伝播します。{% endtrans %}</span>
∗ {% trans %}トランザクションに設定した最大手数料が、各ノード毎に設定されている最低手数料を満たさない場合はそのノードへは伝播しません。{% endtrans %}
</li>
<li>{{ '承認済みトランザクション'|t }}
<span>– {% trans %}約30秒に1度ごとに生成されるブロックに未承認トランザクションが取り込まれると、承認済みトランザクションとなります。{% endtrans %}</span>
</li>
<li>{{ 'ロールバック'|t }}
<span>– {% trans %}ノード間の合意に達することができずロールバックされたブロックに含まれていたトランザクションは、未承認トランザクションに差し戻されます。{% endtrans %}</span>
∗ {% trans %}有効期限切れや、キャッシュからあふれたトランザクションは切り捨てられます。{% endtrans %}
</li>
<li>{{ 'ファイナライズ'|t }}
<span>– {% trans %}投票ノードによるファイナライズプロセスによりブロックが確定するとトランザクションはロールバック不可なデータとして扱うことができます。{% endtrans %}</span>
</li>
</p>
<p>
{% trans %}
これらがブロックチェーンを操作するための最も基本的な情報となります。また、秘密鍵からアカウントを生成したり、公開鍵やアドレスのみを扱うクラスの生成方法も確認しておきましょう。
{% endtrans %}
</p>

<h3>4.1.1 {{ 'ブロックとは'|t }}</h3>
<p>
{% trans %}
ブロックは約30秒ごとに生成され、高い手数料を支払ったトランザクションから優先に取り込まれ、ブロック単位で他のノードと同期します。同期に失敗するとロールバックして、ネットワークが全体で合意が取れるまでこの作業を繰り返します。
{% endtrans %}
</p>

<h4><a href={{ qls_ch4_simple_transfer_transaction_form }}>4.2 {{ 'トランザクション作成'|t }} </a></h4>
<p>
{% trans %}
まずは最も基本的な転送トランザクションを作成してみます。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$bobKey = $facade->createAccount(PrivateKey::random());
echo $bobKey->address . PHP_EOL;
</code></pre>
</div>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
> TDCTNJQT27NMIMGAQYWBUG6MCLBXYI2OOPVZ76I
</code></pre>
</div>
<p>
{% trans %}
トランザクションを作成します。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
// aliceの秘密鍵からアカウント生成
$aliceKey = $facade->createAccount(new PrivateKey($alicePrivateKey));

$messageData = "\0hello, symbol!";
$tx = new TransferTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,
  deadline: new Timestamp($facade->now()->addHours(2)),
  recipientAddress: $bob->address,
  mosaics: [
    new UnresolvedMosaic(
      mosaicId: new UnresolvedMosaicId('0x72C0212E67A08BCE'),
      amount: new Amount(1000000)
    )
  ],
  message: $messageData
);

$facade->setMaxFee($transferTransaction, 100);  // 手数料
var_dump($tx);
</code></pre>
</div>

<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
object(SymbolSdk\Symbol\Models\TransferTransactionV1)#71 (14) {
  ["recipientAddress"]=>
  object(SymbolSdk\Symbol\Models\UnresolvedAddress)#68 (1) {
    ["binaryData"]=>
    string(24) "��!�OX�p�#�:���(���"
  }
  ["mosaics"]=>
  array(1) {
    [0]=>
    object(SymbolSdk\Symbol\Models\UnresolvedMosaic)#76 (2) {
      ["mosaicId"]=>
      object(SymbolSdk\Symbol\Models\UnresolvedMosaicId)#77 (2) {
        ["size"]=>
        int(8)
        ["value"]=>
        int(8268645399043017678)
      }
      ["amount"]=>
      object(SymbolSdk\Symbol\Models\Amount)#78 (2) {
        ["size"]=>
        int(8)
        ["value"]=>
        int(1000000)
      }
    }
  }
  ["message"]=>
  string(15) "hello, symbol!"
  ["transferTransactionBodyReserved_1":"SymbolSdk\Symbol\Models\TransferTransactionV1":private]=>
  int(0)
  ["transferTransactionBodyReserved_2":"SymbolSdk\Symbol\Models\TransferTransactionV1":private]=>
  int(0)
  ["signature"]=>
  object(SymbolSdk\Symbol\Models\Signature)#80 (1) {
    ["binaryData"]=>
    string(64) ""
  }
  ["signerPublicKey"]=>
  object(SymbolSdk\Symbol\Models\PublicKey)#73 (1) {
    ["binaryData"]=>
    string(32) "%�5�#ܼ�ez4�����JmEr�k�OQM���"
  }
  ["version"]=>
  int(1)
  ["network"]=>
  object(SymbolSdk\Symbol\Models\NetworkType)#75 (1) {
    ["value"]=>
    int(152)
  }
  ["type"]=>
  object(SymbolSdk\Symbol\Models\TransactionType)#79 (1) {
    ["value"]=>
    int(16724)
  }
  ["fee"]=>
  object(SymbolSdk\Symbol\Models\Amount)#81 (2) {
    ["size"]=>
    int(8)
    ["value"]=>
    int(19100)
  }
  ["deadline"]=>
  object(SymbolSdk\Symbol\Models\Timestamp)#72 (2) {
    ["size"]=>
    int(8)
    ["value"]=>
    int(54392061979)
  }
  ["verifiableEntityHeaderReserved_1":"SymbolSdk\Symbol\Models\Transaction":private]=>
  int(0)
  ["entityBodyReserved_1":"SymbolSdk\Symbol\Models\Transaction":private]=>
  int(0)
}
</code></pre>
</div>
<p>
{% trans %}
各設定項目について説明します。
{% endtrans %}
</p>
<p>
{{ '有効期限'|t }}
</p>
<p>
{% trans %}
SDKではデフォルトで2時間後に設定されます。 最大6時間まで指定可能です。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
new Timestamp($facade->now()->addHours(2))
</code></pre>
</div>
</p>

<p>
{{ 'メッセージ'|t }}
</p>

<p>
{% trans %}
トランザクションに最大1023バイトのメッセージを添付することができます。 バイナリデータであってもrawdataとして送信することが可能です。
{% endtrans %}
</p>
<p>
{{ '空メッセージ'|t }}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$messageData = "";?
</code></pre>
</div>
<p>
{{ '平文メッセージ'|t }}
</p>
<p>
{% trans %}
エクスプローラーなどで表示するためには先頭に\0を付加する必要があります。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$messageData = "\0hello, symbol!";
</code></pre>
</div>
<p>
{{ '暗号文メッセージ'|t }}
</p>
<p>
{% trans %}
MessageEncoderを使用して暗号化すると、自動で暗号文メッセージを表すメッセージタイプ0x01が付加されます。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$aliceMesgEncoder = new MessageEncoder($aliceKey);
$encryptedMessage = $aliceMesgEncoder->encode($bobKey->publicKey(), $message);
</code></pre>
</div>

<p>
{{ '最大手数料'|t }}
</p>
<p>
{% trans %}
ネットワーク手数料については、常に少し多めに払っておけば問題はないのですが、最低限の知識は持っておく必要があります。 アカウントはトランザクションを作成するときに、ここまでは手数料として払ってもいいという最大手数料を指定します。 一方で、ノードはその時々で最も高い手数料となるトランザクションのみブロックにまとめて収穫しようとします。 つまり、多く払ってもいいというトランザクションが他に多く存在すると承認されるまでの時間が長くなります。 逆に、より少なく払いたいというトランザクションが多く存在し、その総額が大きい場合は、設定した最大額に満たない手数料額で送信が実現します。
{% endtrans %}
</p>
<p>
{% trans %}
トランザクションサイズ x feeMultiprilerというもので決定されます。 176バイトだった場合maxFeeを100で設定すると17600μXYM=0.0176XYMを手数料として支払うことを許容します。 feeMultiprier=100として指定する方法とmaxFee=17600として指定する方法があります。
{% endtrans %}
</p>
<p>
{% trans %}
feeMultiprier = 100として指定する方法
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$facade->setMaxFee($transferTransaction, 100);
</code></pre>
</div>

<h3>4.3 {{ '署名とアナウンス'|t }}</h3>
<p>
{% trans %}
作成したトランザクションを秘密鍵で署名して、任意のノードを通じてアナウンスします。
{% endtrans %}
</p>
<p>
{{ '署名'|t }}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$signature = $aliceKey->signTransaction($transferTransaction);
$payload = $facade->attachSignature($transferTransaction, $signature);
var_dump($payload);
</code></pre>
</div>
<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
array(1) {
  ["payload"]=>
  string(382) "BF0000000000000071B2D3DA6B83E6904DEB1EE5AE259D6F51B71E742B3F4D5B9EC394BADC844A1574F9418F0349D825AAD836100F39F0AB87EC0BF19BE8E21B1AB94D0AC11B780625189135BF2307DCBCD1657A34ABC3FDEEC04A126D4572876BCA4F514DB5AC9B00000000019854419C4A0000000000000CB455A40C00000098D02DDEA92E7186B5321831A58554E7B6EB58454B08161E0F00010000000000CE8BA0672E21C07240420F00000000000068656C6C6F2C2073796D626F6C21"
}
</code></pre>
</div>
<p>
{{ 'アナウンス'|t }}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$config = new Configuration();
$config->setHost($NODE_URL);
$client = new GuzzleHttp\Client();
$apiInstance = new TransactionRoutesApi($client, $config);

try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>
※ {% trans %}
IDEを使っている人は$apiInstance->announceTransaction($payload)ここのpayloadの指定でwarningが表示されるかもしれませんが気にしなくて大丈夫です。
{% endtrans %}

<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
{
    "message": "packet 9 was pushed to the network via \/transactions"
}
</code></pre>
</div>
<p>
{% trans %}
上記のスクリプトのようにpacket n was pushed to the network というレスポンスがあれば、トランザクションはノードに受理されたことになります。これはトランザクションのフォーマット等に異常が無かった程度の意味しかありません。Symbolではノードの応答速度を極限に高めるため、トランザクションの内容を検証するまえに受信結果の応答を返し接続を切断します。レスポンス値はこの情報を受け取ったにすぎません。フォーマットに異常があった場合は以下のようなメッセージ応答があります。
{% endtrans %}
</p>
<p>
{% trans %}
アナウンスに失敗した場合の応答例
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
Uncaught Error: {
"statusCode":409,
"statusMessage":"Unknown Error",
"body":
"{\"code\":\"InvalidArgument\",\"message\":\"payload has an invalid format\"}"
}
</code></pre>
</div>

<h3>4.4 {{ '確認'|t }}</h3>
<h4>4.4.1 {{ 'ステータスの確認'|t }}</h4>
<p>
{% trans %}
ノードに受理されたトランザクションのステータスを確認
{% endtrans %}
</p>

<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$hash = $facade->hashTransaction($transferTransaction);
$txStatusApi = new TransactionStatusRoutesApi($client, $config);

try {
  $txStatus = $txStatusApi->getTransactionStatus($hash);
  var_dump($txStatus);
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>
<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
object(SymbolRestClient\Model\TransactionStatusDTO)#111 (2) {
  ["openAPINullablesSetToNull":protected]=>
  array(0) {
  }
  ["container":protected]=>
  array(5) {
    ["group"]=>
    string(11) "unconfirmed"
    ["code"]=>
    string(7) "Success"
    ["hash"]=>
    string(64) "D944914B44D1E210CF9FE7E7BA9C27ACBDB9B8C76E4844CE7E530B564189C323"
    ["deadline"]=>
    string(11) "54299100360"
    ["height"]=>
    string(1) "0"
  }
}
</code></pre>
</div>
<p>
{% trans %}
承認されると group: "confirmed"となっています。
{% endtrans %}
</p>
<p>
{% trans %}
受理されたものの、エラーが発生していた場合は以下のような出力となります。トランザクションを書き直して再度アナウンスしてみてください。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
object(SymbolRestClient\Model\TransactionStatusDTO)#111 (2) {
  ["openAPINullablesSetToNull":protected]=>
  array(0) {
  }
  ["container":protected]=>
  array(5) {
    ["group"]=>
    string(6) "failed"
    ["code"]=>
    string(33) "Failure_Core_Insufficient_Balance"
    ["hash"]=>
    string(64) "1DC2808BC3BBAD6F8C9ECDC1C5F0523D681E875CA414944D73CCCB592E7775CF"
    ["deadline"]=>
    string(11) "54299158295"
    ["height"]=>
    NULL
  }
}
</code></pre>
</div>
<p>
{% trans %}
以下のようにResourceNotFoundエラーが発生した場合はトランザクションが受理されていません。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
response:
{"code":"ResourceNotFound","message":"no resource exists with id '066A063559C2D4EF2EA3222A9BA46193520915DE24EA4B3E601910 (truncated...)}
</code></pre>
</div>
<p>
{% trans %}
考えられる可能性としては、トランザクションで指定した最大手数料が、ノードで設定された最低手数料に満たない場合や、 アグリゲートトランザクションとしてアナウンスすることが求められているトランザクションを単体のトランザクションでアナウンスした場合に発生するようです。
{% endtrans %}
</p>



<h4>4.4.2 {{ '承認確認'|t }}</h4>

<p>
{% trans %}
トランザクションがブロックに承認されるまでに30秒程度かかります。
{% endtrans %}
</p>

<p>
{{ 'エクスプローラーで確認'|t }}
</p>
{% trans %}
signedTx.hashで取得できるハッシュ値を使ってエクスプローラーで検索してみましょう。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$hash = $facade->hashTransaction($transferTransaction);
echo $hash . PHP_EOL;
</code></pre>
</div>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
> "BAD83010F0A707A8ED0AF9D5BFDDBF8226878F6921CE75C7E75BBE50F869870B"
</code></pre>
</div>
<p>
メインネット https://symbol.fyi/transactions/BAD83010F0A707A8ED0AF9D5BFDDBF8226878F6921CE75C7E75BBE50F869870B<br>
テストネット https://testnet.symbol.fyi/transactions/BAD83010F0A707A8ED0AF9D5BFDDBF8226878F6921CE75C7E75BBE50F869870B
</p>

<p>
{{ 'SDKで確認'|t }}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
try {
  $result = $apiInstance->getConfirmedTransaction($hash);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>
<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
{
    "id": "669CABEA527B051AC20A62DF",
    "meta": {
        "height": "1593561",
        "hash": "7F6E7537D731307CCB6F9DDF62E737326071038851939623FF1AB56C83D2FBDF",
        "merkleComponentHash": "7F6E7537D731307CCB6F9DDF62E737326071038851939623FF1AB56C83D2FBDF",
        "index": 0,
        "timestamp": "54293190821",
        "feeMultiplier": 100
    },
    "transaction": {
        "size": 191,
        "signature": "08BEC8BC4B00733F6E029F92F2B2A736BFAFD748D818BEB98DFCF9FAC36AC6823A6A53A4F16FF1B6A49B0ECAA99FD31B0BD460A876EAD0C1A5D1990356A65105",
        "signerPublicKey": "25189135BF2307DCBCD1657A34ABC3FDEEC04A126D4572876BCA4F514DB5AC9B",
        "version": 1,
        "network": 152,
        "type": 16724,
        "maxFee": "19100",
        "deadline": "54300378357",
        "recipientAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
        "mosaics": [
            {
                "id": "72C0212E67A08BCE",
                "amount": "1000000"
            }
        ],
        "message": "0068656C6C6F2C2073796D626F6C21"
    }
}
</code></pre>
</div>

<p>
■{{ '注意点'|t }} 
{% trans %}
トランザクションはブロックで承認されたとしても、ロールバックが発生するとトランザクションの承認が取り消される場合があります。ブロックが承認された後、数ブロックの承認が進むと、ロールバックの発生する確率は減少していきます。また、Votingノードの投票で実施されるファイナライズブロックを待つことで、記録されたデータは確実なものとなります。
{% endtrans %}
</p>
<p>

■{{ 'スクリプト例'|t }} 
{% trans %}
トランザクションをアナウンスした後は以下のようなスクリプトを流すと、チェーンの状態を把握しやすくて便利です。※途中sleepを入れているのはアナウンスより先にステータスを確認しに行ってしまいエラーを返す可能性があるためです。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
sleep(2);
$hash = $facade->hashTransaction($transferTransaction);
echo "\n===トランザクションハッシュ===" . PHP_EOL;
echo $hash . PHP_EOL;

$txStatusApi = new TransactionStatusRoutesApi($client, $config);

try {
  $txStatus = $txStatusApi->getTransactionStatus($hash);
  echo "\n===ステータスの確認===" . PHP_EOL;
  var_dump($txStatus);
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}

sleep(1);
/**
 * 承認確認
 */
try {
  $result = $apiInstance->getConfirmedTransaction($hash);
  echo "\n===承認確認===" . PHP_EOL;
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>


<h3><a href={{ qls_ch4_list_transactions_form }}>4.5 {{ 'トランザクション履歴'|t }}</a></h3>
<p>{% trans %}Alice が送受信したトランザクション履歴を一覧で取得します。{% endtrans %}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
try {
  $result = $apiInstance->searchConfirmedTransactions(
    address: $aliceKey->address,
    embedded: "true",
  );
  echo "\n===トランザクション履歴===" . PHP_EOL;
  var_dump($result);
} catch (\Throwable $th) {
  echo 'Exception when calling TransactionRoutesApi->searchConfirmedTransactions: ', $th->getMessage(), PHP_EOL;
}
</code></pre>
</div>
<p>※ 
{% trans %}
IDEなどを使うとembeddedはbool型を期待するのでwarningが表示されるかもしれませんが、ここでは文字列のtrueを渡します。
{% endtrans %}
</p>
<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
{
    "data": [
        {
            "id": "669C9D0B527B051AC20A61DF",
            "meta": {
                "height": "1593459",
                "hash": "5FDA8DB2C16B4C0C3F6C22E6856B2A8CFAC5001020F7ED3151069D879A0BE29D",
                "merkleComponentHash": "5FDA8DB2C16B4C0C3F6C22E6856B2A8CFAC5001020F7ED3151069D879A0BE29D",
                "index": 0,
                "timestamp": "54289384247",
                "feeMultiplier": 534
            },
            "transaction": {
                "size": 187,
                "signature": "E9E4E49235FC46D892B77DDC37CB42D827556860D1C609DEF171A4EC698C85744FBD579641E0765CA6B2D9E4E12DCEFF9E6C9473CF5948CFC17BA7A566444F0A",
                "signerPublicKey": "81EA7C15E7EC06261C9F654F54EAC4748CFCF00E09A8FE47779ACD14A7602004",
                "version": 1,
                "network": 152,
                "type": 16724,
                "maxFee": "100000",
                "deadline": "54296567552",
                "recipientAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "mosaics": [
                    {
                        "id": "72C0212E67A08BCE",
                        "amount": "500000000"
                    }
                ],
                "message": "00476F6F64204C75636B21"
            }
        },
        {
            "id": "669C9D31527B051AC20A61E3",
            "meta": {
                "height": "1593460",
                "hash": "A39F0A79CD87D4247B00C2397875803AD2103542B6B3C7F485F80A4A4D613746",
                "merkleComponentHash": "A39F0A79CD87D4247B00C2397875803AD2103542B6B3C7F485F80A4A4D613746",
                "index": 0,
                "timestamp": "54289422373",
                "feeMultiplier": 100
            },
            "transaction": {
                "size": 191,
                "signature": "3F989538EEEBA80AB3394475B8BA93B40B75277B4D12D9003998E20CFBE66721E38B606184A5DA704257B8D766FAEE283901EB0A3945B97C8D18AFB7D83CA104",
                "signerPublicKey": "25189135BF2307DCBCD1657A34ABC3FDEEC04A126D4572876BCA4F514DB5AC9B",
                "version": 1,
                "network": 152,
                "type": 16724,
                "maxFee": "19100",
                "deadline": "54296609500",
                "recipientAddress": "988EF2B2B89F6BC742C3902F8FCD66CF3B096A3B970DCE0D",
                "mosaics": [
                    {
                        "id": "72C0212E67A08BCE",
                        "amount": "1000000"
                    }
                ],
                "message": "0068656C6C6F2C2073796D626F6C21"
            }
        },
        {
            "id": "669C9D7A527B051AC20A61E9",
            "meta": {
                "height": "1593462",
                "hash": "963BFB1866067979D6105053DB85BA190DF22E0ABE39732596361B8788EDA664",
                "merkleComponentHash": "963BFB1866067979D6105053DB85BA190DF22E0ABE39732596361B8788EDA664",
                "index": 0,
                "timestamp": "54289494625",
                "feeMultiplier": 100
            },
            "transaction": {
                "size": 191,
                "signature": "71B2D3DA6B83E6904DEB1EE5AE259D6F51B71E742B3F4D5B9EC394BADC844A1574F9418F0349D825AAD836100F39F0AB87EC0BF19BE8E21B1AB94D0AC11B7806",
                "signerPublicKey": "25189135BF2307DCBCD1657A34ABC3FDEEC04A126D4572876BCA4F514DB5AC9B",
                "version": 1,
                "network": 152,
                "type": 16724,
                "maxFee": "19100",
                "deadline": "54296687628",
                "recipientAddress": "98D02DDEA92E7186B5321831A58554E7B6EB58454B08161E",
                "mosaics": [
                    {
                        "id": "72C0212E67A08BCE",
                        "amount": "1000000"
                    }
                ],
                "message": "0068656C6C6F2C2073796D626F6C21"
            }
        },
        {
            "id": "669CA1CC527B051AC20A6227",
            "meta": {
                "height": "1593492",
                "hash": "5B1974CD5B0958F5A716151EA677A28C20B348920D65E8ECAFEA5C52726E6CD4",
                "merkleComponentHash": "5B1974CD5B0958F5A716151EA677A28C20B348920D65E8ECAFEA5C52726E6CD4",
                "index": 0,
                "timestamp": "54290601924",
                "feeMultiplier": 100
            },
            "transaction": {
                "size": 191,
                "signature": "2ABCC254980A9C662D3A435149E52891FFCC7576AF19F9CEE25053E34A3543EA216A79D3884DFC7770993D32B68EB65ACAFC7A677BBFF363EA0432D725DF060C",
                "signerPublicKey": "25189135BF2307DCBCD1657A34ABC3FDEEC04A126D4572876BCA4F514DB5AC9B",
                "version": 1,
                "network": 152,
                "type": 16724,
                "maxFee": "19100",
                "deadline": "54297798137",
                "recipientAddress": "98A1947584CC5BF18F0C31C76BEB6785639E710DF8D0C65A",
                "mosaics": [
                    {
                        "id": "72C0212E67A08BCE",
                        "amount": "1000000"
                    }
                ],
                "message": "0068656C6C6F2C2073796D626F6C21"
            }
        },
        {
            "id": "669CA3A1527B051AC20A6243",
            "meta": {
                "height": "1593505",
                "hash": "45AE0769D78F2CF7CBD86657B3E0B0E1AAE63D30EA53708B032C00A1A22D0BC0",
                "merkleComponentHash": "45AE0769D78F2CF7CBD86657B3E0B0E1AAE63D30EA53708B032C00A1A22D0BC0",
                "index": 0,
                "timestamp": "54291069705",
                "feeMultiplier": 100
            },
            "transaction": {
                "size": 191,
                "signature": "F484662FCF3E8C6A5AED6CBF145709191F766F75496C712B4096B1A3B1CE1DF9B19C7E6B4EAED093B5C6649C91315F4ADC2F05537389BD6B773C888D02192106",
                "signerPublicKey": "25189135BF2307DCBCD1657A34ABC3FDEEC04A126D4572876BCA4F514DB5AC9B",
                "version": 1,
                "network": 152,
                "type": 16724,
                "maxFee": "19100",
                "deadline": "54298265506",
                "recipientAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "mosaics": [
                    {
                        "id": "72C0212E67A08BCE",
                        "amount": "1000000"
                    }
                ],
                "message": "0068656C6C6F2C2073796D626F6C21"
            }
        },
        {
            "id": "669CA651527B051AC20A6272",
            "meta": {
                "height": "1593524",
                "hash": "A5C897E3FACFEBE21C0E7E5AFC34B03CB69FFE7401E9EB526A518B1CD9909B30",
                "merkleComponentHash": "A5C897E3FACFEBE21C0E7E5AFC34B03CB69FFE7401E9EB526A518B1CD9909B30",
                "index": 0,
                "timestamp": "54291758600",
                "feeMultiplier": 100
            },
            "transaction": {
                "size": 191,
                "signature": "4A299DCB86E3394778EDAAF08784692C62E69FBC26E6C65CD097885558F4B6869740BC4713CD91B45C42A10965303BED2C2515B35EB9533CAAA10D96978E100B",
                "signerPublicKey": "25189135BF2307DCBCD1657A34ABC3FDEEC04A126D4572876BCA4F514DB5AC9B",
                "version": 1,
                "network": 152,
                "type": 16724,
                "maxFee": "19100",
                "deadline": "54298910859",
                "recipientAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "mosaics": [
                    {
                        "id": "72C0212E67A08BCE",
                        "amount": "1000000"
                    }
                ],
                "message": "0068656C6C6F2C2073796D626F6C21"
            }
        },
        {
            "id": "669CA651527B051AC20A6273",
            "meta": {
                "height": "1593524",
                "hash": "03A4710884D72B960574DFD389ED0F2484A4FF3F25C07ABA5E5645D57830B415",
                "merkleComponentHash": "03A4710884D72B960574DFD389ED0F2484A4FF3F25C07ABA5E5645D57830B415",
                "index": 1,
                "timestamp": "54291758600",
                "feeMultiplier": 100
            },
            "transaction": {
                "size": 191,
                "signature": "CEF6B254B5891E8A003930F41C52315D8A42D51EF04874E20EA63618FF8B3EF5F5CFA6F8D6100CCCFB34F9F3C5255AEB8CB40CBD8481B50B46A9FC59DC1ADE08",
                "signerPublicKey": "25189135BF2307DCBCD1657A34ABC3FDEEC04A126D4572876BCA4F514DB5AC9B",
                "version": 1,
                "network": 152,
                "type": 16724,
                "maxFee": "19100",
                "deadline": "54298936740",
                "recipientAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "mosaics": [
                    {
                        "id": "72C0212E67A08BCE",
                        "amount": "1000000"
                    }
                ],
                "message": "0068656C6C6F2C2073796D626F6C21"
            }
        },
        {
            "id": "669CA685527B051AC20A6277",
            "meta": {
                "height": "1593525",
                "hash": "24F6DDD9A53198948EBDC864C5CC8072D08ECA320F2803B45C78A84B12AAED87",
                "merkleComponentHash": "24F6DDD9A53198948EBDC864C5CC8072D08ECA320F2803B45C78A84B12AAED87",
                "index": 0,
                "timestamp": "54291809907",
                "feeMultiplier": 100
            },
            "transaction": {
                "size": 191,
                "signature": "3CAE1F2908409365391D87C48B5C8C3C5C11CD920C7CCA8A8C738FB78140130811AAECA54AA0A235E2956C3B1867280156EF3EEA0609826B617C2CE934901E0F",
                "signerPublicKey": "25189135BF2307DCBCD1657A34ABC3FDEEC04A126D4572876BCA4F514DB5AC9B",
                "version": 1,
                "network": 152,
                "type": 16724,
                "maxFee": "19100",
                "deadline": "54299008654",
                "recipientAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "mosaics": [
                    {
                        "id": "72C0212E67A08BCE",
                        "amount": "1000000"
                    }
                ],
                "message": "0068656C6C6F2C2073796D626F6C21"
            }
        },
        {
            "id": "669CA709527B051AC20A627F",
            "meta": {
                "height": "1593528",
                "hash": "D944914B44D1E210CF9FE7E7BA9C27ACBDB9B8C76E4844CE7E530B564189C323",
                "merkleComponentHash": "D944914B44D1E210CF9FE7E7BA9C27ACBDB9B8C76E4844CE7E530B564189C323",
                "index": 0,
                "timestamp": "54291942199",
                "feeMultiplier": 100
            },
            "transaction": {
                "size": 191,
                "signature": "EA54DC04B9E2039090FC73E4B19EC6063542FB41978C6C6A327C1DDA3F04678F50D4F76EF5D0DFC5EB38C002D3F39219C1278DF9BDD2F83954DA1C4A3001E709",
                "signerPublicKey": "25189135BF2307DCBCD1657A34ABC3FDEEC04A126D4572876BCA4F514DB5AC9B",
                "version": 1,
                "network": 152,
                "type": 16724,
                "maxFee": "19100",
                "deadline": "54299100360",
                "recipientAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "mosaics": [
                    {
                        "id": "72C0212E67A08BCE",
                        "amount": "1000000"
                    }
                ],
                "message": "0068656C6C6F2C2073796D626F6C21"
            }
        },
        {
            "id": "669CA74F527B051AC20A6285",
            "meta": {
                "height": "1593530",
                "hash": "9E2E98FE88AEA9685E0B0A87E56C17F436F429A452CC3A7B187AC37E2B26DB79",
                "merkleComponentHash": "9E2E98FE88AEA9685E0B0A87E56C17F436F429A452CC3A7B187AC37E2B26DB79",
                "index": 0,
                "timestamp": "54292012549",
                "feeMultiplier": 100
            },
            "transaction": {
                "size": 191,
                "signature": "0A550C24171133AAE9349841E3EE919BC9B410CC94CB40C568031901CF0ABB2974F9DFE88068547A06044CB97F4A0315A648D0EEAB163C8A76E5AD2C086C320F",
                "signerPublicKey": "25189135BF2307DCBCD1657A34ABC3FDEEC04A126D4572876BCA4F514DB5AC9B",
                "version": 1,
                "network": 152,
                "type": 16724,
                "maxFee": "19100",
                "deadline": "54299208979",
                "recipientAddress": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0",
                "mosaics": [
                    {
                        "id": "72C0212E67A08BCE",
                        "amount": "1000000"
                    }
                ],
                "message": "0068656C6C6F2C2073796D626F6C21"
            }
        }
    ],
    "pagination": {
        "pageNumber": 1,
        "pageSize": 10
    }
}
</code></pre>
</div>

<h4>4.5.1 {% trans %}Txペイロード作成時のメッセージの差異{% endtrans %}</h4>
<p>【{% trans %}未検証のため検証後執筆予定{% endtrans %}】</p>
<!--
https://docs.symbol-community.com/ja/symbol_sdk/v3/transaction
-->

<h3><a href={{ qls_ch4_form_page }}>4.6 {{ 'アグリゲートトランザクション'|t }}</a></h3>
<p>
{% trans %}
Symbolでは複数のトランザクションを1ブロックにまとめてアナウンスすることができます。最大で100件のトランザクションをまとめることができます(連署者が異なる場合は25アカウントまでを連署指定可能)。以降の章で扱う内容にアグリゲートトランザクションへの理解が必要な機能が含まれますので、本章ではアグリゲートトランザクションのうち、簡単なものだけを紹介します。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$bobKey = $facade->createAccount(PrivateKey::random());
$bobAddress = $bobKey->address;
$carolKey = $facade->createAccount(PrivateKey::random());
$carolAddress = $carolKey->address;

// アグリゲートTxに含めるTxを作成
$innerTx1 = new EmbeddedTransferTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,
  recipientAddress: $carolAddress,
  message: "\0hello, carol!"
);

$innerTx2 = new EmbeddedTransferTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,
  recipientAddress: $bobAddress,
  message: "\0hello, bob!"
);

// マークルハッシュの算出
$embeddedTransactions = [$innerTx1, $innerTx2];
$merkleHash = $facade->hashEmbeddedTransactions($embeddedTransactions);

// アグリゲートTx作成
$aggregateTx = new AggregateCompleteTransactionV2(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,
  deadline: new Timestamp($facade->now()->addHours(2)),
  transactionsHash: $merkleHash,
  transactions: $embeddedTransactions
);
$facade->setMaxFee($aggregateTx, 100);  // 手数料

// 署名
$sig = $aliceKey->signTransaction($aggregateTx);
$payload = $facade->attachSignature($aggregateTx, $sig);
// アナウンス
try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>

<p>
{% trans %}
まず、アグリゲートトランザクションに含めるトランザクションを作成します。このときDeadlineを指定する必要はありませんがnetwork は必ず指定してください。(指定しない場合Failure_Core_Wrong_Networkが発生します)リスト化するときに、生成したトランザクションにtoAggregateを追加して送信元アカウントの公開鍵を指定します。ちなみに送信元アカウントと署名アカウントが必ずしも一致するとは限りません。後の章での解説で「Bobの送信トランザクションをAliceが署名する」といった事が起こり得るためこのような書き方をします。これはSymbolブロックチェーンでトランザクションを扱ううえで最も重要な概念になります。なお、本章で扱うトランザクションは同じAliceですので、アグリゲートボンデッドトランザクションへの署名もAliceを指定します。
{% endtrans %}
</p>

<h4>4.6.1 {% trans %}アグリゲートトランザクションにおける最大手数料{% endtrans %}</h4>
<p>
{% trans %}
アグリゲートトランザクションも通常のトランザクション同様、最大手数料を直接指定する方法とfeeMultiprierで指定する方法があります。先の例では最大手数料を直接指定する方法を使用しました。ここではfeeMultiprierで指定する方法を紹介します。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$requiredCosignatures = 1; // 必要な連署者の数を指定
$calculatedCosignatures = $requiredCosignatures > count($aggregateTx->cosignatures)
    ? $requiredCosignatures
    : count($aggregateTx->cosignatures);
$sizePerCosignature = 8 + 32 + 64;
$calculatedSize = $aggregateTx->size() -
    count($aggregateTx->cosignatures) * $sizePerCosignature +
    $calculatedCosignatures * $sizePerCosignature;

$aggregateTx->fee = new Amount($calculatedSize * 100);  // 手数料
</code></pre>
</div>

<h3>4.7 {{ '現場で使えるヒント'|t }}</h3>
<p>
{% trans %}
存在証明アカウントの章でアカウントによるデータの署名と検証する方法について説明しました。このデータをトランザクションに載せてブロックチェーンが承認することで、アカウントがある時刻にあるデータの存在を認知したことを消すことができなくなります。タイムスタンプの刻印された電子署名を利害関係者間で所有することと同じ意味があると考えることもできます。（法律的な判断は他の方にお任せします）ブロックチェーンは、この消せない「アカウントが認知したという事実」の存在をもって送信などのデータ更新を行います。また、誰もがまだ知らないはずの事実を知っていたことの証明としてブロックチェーンを利用することもできます。ここでは、その存在が証明されたデータをトランザクションに載せる2つの方法について説明します。デジタルデータのハッシュ値(SHA256)出力方法ファイルの要約値をブロックチェーンに記録することでそのファイルの存在を証明することができます。各OSごとのファイルのSHA256でハッシュ値を計算する方法は下記の通りです。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
#Windows
certutil -hashfile WINファイルパス SHA256
#Mac
shasum -a 256 MACファイルパス
#Linux
sha256sum Linuxファイルパス
</code></pre>
</div>

<h4>4.7.1 {{ '大きなデータの分割'|t }}</h4>
<p>
{% trans %}
トランザクションのペイロードには1023バイトしか格納できないため、大きなデータは分割してペイロードに詰め込んでアグリゲートトランザクションにします。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$bigdata

$payloads = [];
for ($i = 0; $i < strlen($bigdata) / 1023; $i++) {
    $payloads[] = substr($bigdata, $i * 1023, 1023);
}

print_r($payloads);
</code></pre>
</div>



<!--
todo
https://github.com/kicnft/SIPs/blob/main/SIPS/sip-1000.md
-->