{#
Description text for Section 6.
#}

{% set qls_sect6_create_namespace_form = path('qls_sect6.create_namespace_form') %}
{% set qls_sect6_create_subnamespace_form = path('qls_sect6.create_subnamespace_form') %}
{% set qls_sect6_list_namespaces_form = path('qls_sect6.list_namespaces_form') %}
{% set qls_sect6_link_namespace_form = path('qls_sect6.link_namespace_form') %}
{% set qls_sect6_namespace_trnsfer_trnsaction_form = path('qls_sect6.namespace_transfer_transaction_form') %}
{% set qls_sect6_check_namespace_form = path('qls_sect6.check_namespace_form') %}
{% set qls_sect6_reverse_lookup_namespace_form = path('qls_sect6.reverse_lookup_namespace_form') %}
{% set qls_sect6_check_receipt_form = path('qls_sect6.check_receipt_form') %}

<h2>{{ '第6章'|t }} {{ 'ネームスペース'|t }}</h2>

<p>
{% trans %}
Symbolブロックチェーンではネームスペースをレンタルしてアドレスやモザイクに視認性の高い単語をリンクさせることができます。 ネームスペースは最大64文字、利用可能な文字は a, b, c, …, z, 0, 1, 2, …, 9, _ , - です。
{% endtrans %}
</p>

<h3>6.1 {{ '手数料の計算'|t }}</h3>

<p>
{% trans %}
ネームスペースのレンタルにはネットワーク手数料とは別にレンタル手数料が発生します。ネットワークの活性度に比例して価格が変動しますので、取得前に確認するようにしてください。ルートネームスペースを365日レンタルする場合の手数料を計算します。
{% endtrans %}
</p>

<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$config = new Configuration();
$config->setHost($NODE_URL);
$client = new GuzzleHttp\Client();

$networkApiInstance = new NetworkRoutesApi($client, $config);
$rootNsperBlock = $networkApiInstance->getRentalFees()->getEffectiveRootNamespaceRentalFeePerBlock();
$rentalDays = 365;
$rentalBlock = ($rentalDays * 24 * 60 * 60) / 30;
$rootNsRenatalFeeTotal = $rentalBlock * $rootNsperBlock;
echo "rentalBlock: " . $rentalBlock . PHP_EOL;
echo "Root Namespace Rental Fee: " . $rootNsRenatalFeeTotal . PHP_EOL;
</code></pre>
</div>

<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
rentalBlock: 1051200
Root Namespace Rental Fee: 210240000 //約210XYM
</code></pre>
</div>

<p>
{% trans %}
期間はブロック数で指定します。1ブロックを30秒として計算しました。最低で30日分はレンタルする必要があります(最大で1825日分)。
{% endtrans %}
</p>
<p>
{% trans %}
サブネームスペースの取得手数料を計算します。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$childNamespaceRentalFee = $networkApiInstance->getRentalFees()->getEffectiveChildNamespaceRentalFee();
echo "Child Namespace Rental Fee: " . $childNamespaceRentalFee . PHP_EOL;
</code></pre>
</div>
<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
Child Namespace Rental Fee: 10000000 //10XYM
</code></pre>
</div>

<p>
{% trans %}
サブネームスペースに期間指定はありません。ルートネームスペースをレンタルしている限り使用できます。
{% endtrans %}
</p>

<h3>6.2 {{ 'レンタル'|t }}</h3>
<p>
<a href={{ qls_sect6_create_namespace_form }}>{% trans %}ルートネームスペースをレンタルします{% endtrans %}</a>({{ '例'|t }}:xembook)
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$name = "xembook";
$tx = new NamespaceRegistrationTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,  // 署名者公開鍵
  deadline: new Timestamp($facade->now()->addHours(2)),
  duration: new BlockDuration(86400), // 有効期限
  id: new NamespaceId(IdGenerator::generateNamespaceId($name)), //必須
  name: $name,
);
$facade->setMaxFee($tx, 100);
// 署名
$sig = $aliceKey->signTransaction($tx);
$payload = $facade->attachSignature($tx, $sig);

// アナウンス
$config = new Configuration();
$config->setHost($NODE_URL);
$client = new GuzzleHttp\Client();
$apiInstance = new TransactionRoutesApi($client, $config);

try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>

<p>
<a href={{ qls_sect6_create_subnamespace_form }}>{% trans %}サブネームスペースをレンタルします{% endtrans %}</a>({{ '例'|t }}:xembook.tomato)
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$parnetNameId = IdGenerator::generateNamespaceId("xembook"); //ルートネームスペース名
$name = "tomato"; //サブネームスペース名

// Tx作成
$tx = new NamespaceRegistrationTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,  // 署名者公開鍵
  deadline: new Timestamp($facade->now()->addHours(2)),
  duration: new BlockDuration(86400), // 有効期限
  parentId: new NamespaceId($parnetNameId),
  id: new NamespaceId(IdGenerator::generateNamespaceId($name, $parnetNameId)),
  registrationType: new NamespaceRegistrationType(NamespaceRegistrationType::CHILD),
  name: $name,
);
$facade->setMaxFee($tx, 200);

// 署名
$sig = $aliceKey->signTransaction($tx);
$payload = $facade->attachSignature($tx, $sig);

/**
 * アナウンス
 */
$config = new Configuration();
$config->setHost($NODE_URL);
$client = new GuzzleHttp\Client();
$apiInstance = new TransactionRoutesApi($client, $config);

try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>

<p>
{% trans %}
2階層目のサブネームスペースを作成したい場合は例えば、xembook.tomato.morning を定義したい場合は以下のようにします。
{% endtrans %}
</p>

<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$rootName = IdGenerator::generateNamespaceId("xembook"); //ルートネームスペース名
$parnetNameId = IdGenerator::generateNamespaceId("tomato", $rootName); // 紐づけたい1階層目のサブネームスペース
$name = "morning"; //サブネームスペース名
// 以下はサブネームスペース作成と同じ
</code></pre>
</div>

<h4><a href={{ qls_sect6_list_namespaces_form }}>6.2.1 {{ '有効期限の計算'|t }}</a></h4>

<p>
{% trans %}
トランザクションがブロックに承認されるまでに30秒程度かかります。
{% endtrans %}
</p>

<p>
{% trans %}
レンタル済みルートネームスペースの有効期限を計算します。
{% endtrans %}
</p>

<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$namespaceIds = IdGenerator::generateNamespacePath("xembook"); // ルートネームスペース
$namespaceId = new NamespaceId($namespaceIds[count($namespaceIds) - 1]);

$config = new Configuration();
$config->setHost($NODE_URL);
$client = new GuzzleHttp\Client();
$namespaceApiInstance = new NamespaceRoutesApi($client, $config);
try {
  $nsInfo = $namespaceApiInstance->getNamespace(substr($namespaceId, 2));
  // echo $nsInfo['namespace']. PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}

$chainApiInstance = new ChainRoutesApi($client, $config);
try {
  $chainInfo = $chainApiInstance->getChainInfo(substr($namespaceId, 2));
  // echo $chainInfo . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
$lastHeight = (int)$chainInfo['height'];

$blockApiInstance = new BlockRoutesApi($client, $config);
try {
  $lastBlock = $blockApiInstance->getBlockByHeight($lastHeight);
  // echo $lastBlock . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
$remainHeight = (int)$nsInfo['namespace']['end_height'] - $lastHeight;

$endDate = Carbon::createFromTimestampMs((int)$lastBlock['block']['timestamp'] + $remainHeight * 30000 + $epochAdjustment * 1000);
echo "End Date: " . $endDate . PHP_EOL;
</code></pre>
</div>

<p>
{% trans %}
ネームスペース情報の終了ブロックを取得し、現在のブロック高から差し引いた残ブロック数に30秒(平均ブロック生成間隔) を掛け合わせた日時を出力します。
テストネットでは設定した有効期限よりも1日程度更新期限が猶予されます。メインネットはこの値が30日となっていますのでご留意ください。
{% endtrans %}
</p>
<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
End Date: 2024-09-22 04:02:26
</code></pre>
</div>

<h3><a href={{ qls_sect6_link_namespace_form }}>6.3 {{ 'リンク'|t }}</a></h3>

<h4>6.3.1 {{ 'アカウントへのリンク'|t }}</h4>

<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$namespaceId = IdGenerator::generateNamespaceId("xembook"); // ルートネームスペース
$address = $aliceKey->address;

//Tx作成
$tx = new AddressAliasTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,
  deadline: new Timestamp($facade->now()->addHours(2)),
  namespaceId: new NamespaceId($namespaceId),
  address: new Address($address),
  aliasAction: new AliasAction(AliasAction::LINK),
);
$facade->setMaxFee($tx, 100);

//署名
$sig = $aliceKey->signTransaction($tx);
$payload = $facade->attachSignature($tx, $sig);

$apiInstance = new TransactionRoutesApi($client, $config);

try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>

<p>
{% trans %}
リンク先のアドレスは自分が所有していなくても問題ありません。
{% endtrans %}
</p>

<h4>6.3.2 {{ 'モザイクへリンク'|t }}</h4>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$namespaceIds = IdGenerator::generateNamespacePath("xembook.tomato"); // ルートネームスペース
$namespaceId = new NamespaceId($namespaceIds[count($namespaceIds) - 1]);
$mosaicId = new MosaicId("0x12679808DC2xxxx");

//Tx作成
$tx = new MosaicAliasTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,
  deadline: new Timestamp($facade->now()->addHours(2)),
  namespaceId: new NamespaceId($namespaceId),
  mosaicId: $mosaicId,
  aliasAction: new AliasAction(AliasAction::LINK),
);
$facade->setMaxFee($tx, 100);

//署名
$sig = $aliceKey->signTransaction($tx);
$payload = $facade->attachSignature($tx, $sig);

$apiInstance = new TransactionRoutesApi($client, $config);

try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>
<p>
{% trans %}
モザイクを作成したアドレスと同一の場合のみリンクできるようです。
{% endtrans %}
</p>

<h3><a href={{ qls_sect6_namespace_trnsfer_trnsaction_form }}>6.4 {{ '未解決で使用'|t }}</a></h3>

<p>
{% trans %}
送信先にUnresolvedAccountとして指定して、アドレスを特定しないままトランザクションを署名・アナウンスします。
チェーン側で解決されたアカウントに対しての送信が実施されます。
v3ではネームスペースを直接指定できないため、アドレスを特定しないまま操作する場合はデータを加工する必要があります。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">

// UnresolvedAccount 導出
$namespaceId = IdGenerator::generateNamespaceId("xembook"); // ルートネームスペース
$address = Address::fromNamespaceId(new NamespaceId($namespaceId), $facade->network->identifier);

// Tx作成
$tx = new TransferTransactionV1(
  signerPublicKey: $aliceKey->publicKey,
  network: new NetworkType($networkType),
  deadline: new Timestamp($facade->now()->addHours(2)),
  recipientAddress: new UnresolvedAddress($unresolvedAccount),
  message: ''
);
$facade->setMaxFee($tx, 100);

//署名
$sig = $aliceKey->signTransaction($tx);
$payload = $facade->attachSignature($tx, $sig);

$apiInstance = new TransactionRoutesApi($client, $config);

try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>

<p>
{% trans %}
送信モザイクにUnresolvedMosaicとして指定して、モザイクIDを特定しないままトランザクションを署名・アナウンスします。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$namespaceIds = IdGenerator::generateNamespacePath("xembook.tomato"); // ルートネームスペース
$namespaceId = new NamespaceId($namespaceIds[count($namespaceIds) - 1]);

$tx = new TransferTransactionV1(
  network: new NetworkType(NetworkType::TESTNET),
  signerPublicKey: $aliceKey->publicKey,
  deadline: new Timestamp($facade->now()->addHours(2)),
  recipientAddress: $aliceKey->address,
  mosaics: [
    new UnresolvedMosaic(
      mosaicId: new UnresolvedMosaicId($namespaceId),
      amount: new Amount(100)
    ),
  ],
);
$facade->setMaxFee($tx, 100);

//署名
$sig = $aliceKey->signTransaction($tx);
$payload = $facade->attachSignature($tx, $sig);

$apiInstance = new TransactionRoutesApi($client, $config);

try {
  $result = $apiInstance->announceTransaction($payload);
  echo $result . PHP_EOL;
} catch (Exception $e) {
  echo 'Exception when calling TransactionRoutesApi->announceTransaction: ', $e->getMessage(), PHP_EOL;
}
</code></pre>
</div>

<p>
{% trans %}
XYMをネームスペースで使用する場合は以下のように指定します。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$namespaceIds = IdGenerator::generateNamespacePath("symbol.xym");
$namespaceId = new NamespaceId($namespaceIds[count($namespaceIds) - 1]);
var_dump($namespaceId);
</code></pre>
</div>
<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
object(SymbolSdk\Symbol\Models\NamespaceId)#101 (2) {
  ["size"]=>
  int(8)
  ["value"]=>
  int(-1780160202445377554)
}
</code></pre>
</div>

<h3><a href={{ qls_sect6_check_namespace_form }}>6.5 {{ '参照'|t }}</a></h3>
<p>
{% trans %}
アドレスへリンクしたネームスペースを参照します。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$namespaceId = new NamespaceId(IdGenerator::generateNamespaceId("xembook"));
$namespaceInfo = $namespaceApiInstance->getNamespace(substr($namespaceId, 2));
var_dump($namespaceInfo);
</code></pre>
</div>
<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
object(SymbolRestClient\Model\NamespaceInfoDTO)#124 (2) {
  ["openAPINullablesSetToNull":protected]=>
  array(0) {
  }
  ["container":protected]=>
  array(3) {
    ["id"]=>
    string(24) "66A048C3527B051AC20A9E78"
    ["meta"]=>
    object(SymbolRestClient\Model\NamespaceMetaDTO)#129 (2) {
      ["openAPINullablesSetToNull":protected]=>
      array(0) {
      }
      ["container":protected]=>
      array(2) {
        ["active"]=>
        bool(true)
        ["index"]=>
        int(1)
      }
    }
    ["namespace"]=>
    object(SymbolRestClient\Model\NamespaceDTO)#120 (2) {
      ["openAPINullablesSetToNull":protected]=>
      array(0) {
      }
      ["container":protected]=>
      array(11) {
        ["version"]=>
        int(1)
        ["registration_type"]=>
        int(0)
        ["depth"]=>
        int(1)
        ["level0"]=>
        string(16) "E6707B3A003BDDD3"
        ["level1"]=>
        NULL
        ["level2"]=>
        NULL
        ["alias"]=>
        object(SymbolRestClient\Model\AliasDTO)#132 (2) {
          ["openAPINullablesSetToNull":protected]=>
          array(0) {
          }
          ["container":protected]=>
          array(3) {
            ["type"]=>
            int(2)
            ["mosaic_id"]=>
            NULL
            ["address"]=>
            string(48) "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0"
          }
        }
        ["parent_id"]=>
        string(16) "0000000000000000"
        ["owner_address"]=>
        string(48) "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0"
        ["start_height"]=>
        string(7) "1597929"
        ["end_height"]=>
        string(7) "1773609"
      }
    }
  }
}
</code></pre>
</div>

<p>
{% trans %}
AliasTypeは以下の通りです。
{% endtrans %}
</p>
<pre>
{0: 'None', 1: 'Mosaic', 2: 'Address'}
</pre>

<p>
{% trans %}
NamespaceRegistrationTypeは以下の通りです。
{% endtrans %}
</p>
<pre>
{0: 'RootNamespace', 1: 'SubNamespace'}
</pre>

<p>
{% trans %}
モザイクへリンクしたネームスペースを参照します。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$namespaceIds = IdGenerator::generateNamespacePath("xembook.tomato");
$namespaceId = new NamespaceId($namespaceIds[count($namespaceIds) - 1]);
$namespaceInfo = $namespaceApiInstance->getNamespace(substr($namespaceId, 2));
var_dump($namespaceInfo);
</code></pre>
</div>
<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
object(SymbolRestClient\Model\NamespaceInfoDTO)#104 (2) {
  ["openAPINullablesSetToNull":protected]=>
  array(0) {
  }
  ["container":protected]=>
  array(3) {
    ["id"]=>
    string(24) "66A048C3527B051AC20A9E7D"
    ["meta"]=>
    object(SymbolRestClient\Model\NamespaceMetaDTO)#133 (2) {
      ["openAPINullablesSetToNull":protected]=>
      array(0) {
      }
      ["container":protected]=>
      array(2) {
        ["active"]=>
        bool(true)
        ["index"]=>
        int(1)
      }
    }
    ["namespace"]=>
    object(SymbolRestClient\Model\NamespaceDTO)#128 (2) {
      ["openAPINullablesSetToNull":protected]=>
      array(0) {
      }
      ["container":protected]=>
      array(11) {
        ["version"]=>
        int(1)
        ["registration_type"]=>
        int(1)
        ["depth"]=>
        int(2)
        ["level0"]=>
        string(16) "E6707B3A003BDDD3"
        ["level1"]=>
        string(16) "9EFE1CF171B6C81E"
        ["level2"]=>
        NULL
        ["alias"]=>
        object(SymbolRestClient\Model\AliasDTO)#136 (2) {
          ["openAPINullablesSetToNull":protected]=>
          array(0) {
          }
          ["container":protected]=>
          array(3) {
            ["type"]=>
            int(1)
            ["mosaic_id"]=>
            string(16) "12679808DC2A1493"
            ["address"]=>
            NULL
          }
        }
        ["parent_id"]=>
        string(16) "E6707B3A003BDDD3"
        ["owner_address"]=>
        string(48) "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0"
        ["start_height"]=>
        string(7) "1597929"
        ["end_height"]=>
        string(7) "1773609"
      }
    }
  }
}
</code></pre>
</div>

<h4><a href={{ qls_sect6_reverse_lookup_namespace_form }}>6.5.1 {{ '逆引き'|t }}</a></h4>
<p>
{% trans %}
アドレスに紐づけられたネームスペースを全て調べます。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$addresses = ["addresses"=> ["TBIL6D6RURP45YQRWV6Q7YVWIIPLQGLZQFHWFEQ"]];
$accountNames = $namespaceApiInstance->getAccountsNames($addresses);
var_dump($accountNames);
</code></pre>
</div>

<p>
{% trans %}
モザイクに紐づけられたネームスペースを全て調べます。
{% endtrans %}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$mosaicIds = ["mosaicIds"=> ["72C0212E67A08BCE"]];
$mosaicNames = $namespaceApiInstance->getMosaicsNames($mosaicIds);
var_dump($mosaicNames);
</code></pre>
</div>


<h4><a href={{ qls_sect6_check_receipt_form }}>6.5.2 {{ 'レシートの参照'|t }}</a></h4>
<p>
{% trans %}
トランザクションに使用されたネームスペースをブロックチェーン側がどう解決したかを確認します。
{% endtrans %}
</p>

<p>
{{ 'アドレスの場合'|t }}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$receiptApiInstance = new ReceiptRoutesApi($client, $config);

$state = $receiptApiInstance->searchAddressResolutionStatements(
  height: 1600481
);
echo $state;
</code></pre>
</div>
<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
{
    "data": [
        {
            "id": "66A07563527B051AC20AA1FE",
            "meta": {
                "timestamp": "54541377011"
            },
            "statement": {
                "height": "1600481",
                "unresolved": "99D3DD3B003A7B70E6000000000000000000000000000000",
                "resolutionEntries": [
                    {
                        "source": {
                            "primaryId": 1,
                            "secondaryId": 0
                        },
                        "resolved": "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0"
                    }
                ]
            }
        }
    ],
    "pagination": {
        "pageNumber": 1,
        "pageSize": 10
    }
}
</code></pre>
</div>

<p>
{{ 'モザイクの場合'|t }}
</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
$state = $receiptApiInstance->searchMosaicResolutionStatements(
  height: 1601155
);
echo $state;
</code></pre>
</div>
<p class="output-ex">{{ '出力例'|t }}</p>
<div class="code-container">
  <button class="toggle-code">Show Code</button>
  <pre><code class="code-block">
object(stdClass)#142 (2) {
  ["data"]=>
  array(1) {
    [0]=>
    object(stdClass)#139 (3) {
      ["statement"]=>
      object(stdClass)#143 (3) {
        ["height"]=>
        string(7) "1600481"
        ["unresolved"]=>
        string(48) "99D3DD3B003A7B70E6000000000000000000000000000000"
        ["resolutionEntries"]=>
        array(1) {
          [0]=>
          object(stdClass)#144 (2) {
            ["source"]=>
            object(stdClass)#140 (2) {
              ["primaryId"]=>
              int(1)
              ["secondaryId"]=>
              int(0)
            }
            ["resolved"]=>
            string(48) "98E521BD0F024F58E670A023BF3A14F3BECAF0280396BED0"
          }
        }
      }
      ["id"]=>
      string(24) "66A07563527B051AC20AA1FE"
      ["meta"]=>
      object(stdClass)#95 (1) {
        ["timestamp"]=>
        string(11) "54541377011"
      }
    }
  }
  ["pagination"]=>
  object(stdClass)#124 (2) {
    ["pageNumber"]=>
    int(1)
    ["pageSize"]=>
    int(10)
  }
}
{
    "data": [
        {
            "id": "66A0D267527B051AC20AA8AB",
            "meta": {
                "timestamp": "54565187345"
            },
            "statement": {
                "height": "1601155",
                "unresolved": {},
                "resolutionEntries": [
                    {
                        "source": {
                            "primaryId": 1,
                            "secondaryId": 0
                        },
                        "resolved": {}
                    }
                ]
            }
        }
    ],
    "pagination": {
        "pageNumber": 1,
        "pageSize": 10
    }
}
</code></pre>
</div>


<p>
{{ '注意事項'|t }}
</p>
<p>
{% trans %}
ネームスペースはレンタル制のため、過去のトランザクションで使用したネームスペースのリンク先と現在のネームスペースのリンク先が異なる可能性があります。
過去のデータを参照する際などに、その時どのアカウントにリンクしていたかなどを知りたい場合は必ずレシートを参照するようにしてください。
{% endtrans %}
</p>

<h3>6.6 {{ '現場で使えるヒント'|t }}</h3>

<h4>6.6.1 {{ '外部ドメインとの相互リンク'|t }}</h4>
<p>
{% trans %}
ネームスペースは重複取得がプロトコル上制限されているため、インターネットドメインや実世界で周知されている商標名と同一のネームスペースを取得し、外部(公式サイトや印刷物など) からネームスペース存在の認知を公表することで、Symbol上のアカウントのブランド価値を構築することができます(法的な効力については調整が必要です)。外部ドメイン側のハッキングあるいは、Symbol側でのネームスペース更新忘れにはご注意ください。
{% endtrans %}
</p>
<p>
{% trans %}
ネームスペースを取得するアカウントについての注意ネームスペースはレンタル期限という概念をもつ機能です。今のところ、取得したネームスペースは放棄か延長の選択肢しかありません。運用譲渡などが発生する可能性のあるシステムでネームスペース活用を検討する場合はマルチシグ化(9章) したアカウントでネームスペースを取得することをおすすめします。
{% endtrans %}
</p>
<p>
{% trans %}
ネームスペースを取得するアカウントについての注意
{% endtrans %}
</p>
<p>
{% trans %}
ネームスペースはレンタル期限という概念をもつ機能です。今のところ、取得したネームスペースは放棄か延長の選択肢しかありません。運用譲渡などが発生する可能性のあるシステムでネームスペース活用を検討する場合はマルチシグ化(9章) したアカウントでネームスペースを取得することをおすすめします。
{% endtrans %}
</p>

